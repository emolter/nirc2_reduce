.run ~/idl/imke_pro/imlist_new.pro   #reads the .fits file in the directory, makes a log file with date, filters, time, object, etc.
imlist_new,1,169,outfile='29aug2015.log',fdir='',fname='n',ext='.fits.gz',/scam

## load in flats.
.run ~/idl/imke_pro/loadims2.pro 
## Note this divides by the number of coadds!  Need to eventually get to photons/s
# which means divide by (tint*coadd) - when I adapt this, do them both at once!
loadims,16,20,domehona,fdir='raw/',fname='n000',ext='.fits',scam='scam'
loadims,11,15,domekona,fdir='raw/',fname='n000',ext='.fits',scam='scam'
loadims,6,10,domehoffa,fdir='raw/',fname='n000',ext='.fits',scam='scam'
loadims,1,5,domekoffa,fdir='raw/',fname='n000',ext='.fits',scam='scam'

## median average the five flats in each filter to remove spurious bad pixels, etc.
avgmed_new,domekon,domekona,/noweight
avgmed_new,domekoff,domekoffa,/noweight
avgmed_new,domehon,domehona,/noweight
avgmed_new,domehoff,domehoffa,/noweight

## difference on and off to get "real" dome flat. This makes bad pixels go away
domekp=domekon-domekoff
domeh=domehon-domehoff
domej=domejon-domejoff

## divide dome flats by median so counts are normalized to 1
domekp=domekp/median(domekp)
domeh=domeh/median(domeh)
domej=domej/median(domej)

## showing fits files (atv is idl package to handle fits files)
atv,domekp
atv,domeh
atv,domej

## changes any pixels of value zero (bad pixels) to value 1
# this allows us to divide later without dividing by zero
# when I rewrite in Python, make these NaNs and make everything handle NaNs
.run flatfix
flatfix,domekp,flatkp
flatfix,domeh,flath
flatfix,domej,flatj
# write this "final" dome flat as a .fits file
writefits,'reduct/fits/flatkp.fits',flatkp
writefits,'reduct/fits/flatj.fits',flatj
writefits,'reduct/fits/flath.fits',flath

## make badpix map from combined flats
# tolerance: for a given pixel, takes average over nearest ~5 pixels square. good pixels are between 0.94 and 1.06 of this average, bad pixels are outside there
# that is, it looks for places where the flux does NOT smoothly vary, takes those out
# also hard-codes in some of the bad pixels - hopefully can find a way to make this unnecessary
im=(flatkp+flath)/2.0
.run badpix_make_nirc2.pro
hpmake,im,imout,hpmask,1.06,0.94

## write out bad pixel mask
writefits,'reduct/fits/hpmask.fits',hpmask
atv,hpmask

