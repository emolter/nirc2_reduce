## load flats and bad pixel mask (see instructions_flats)
flatkp=readfits('~imke/keck/2015aug29/reduct/fits/flatkp.fits')
flath=readfits('~imke/keck/2015aug29/reduct/fits/flath.fits')
hpmask=readfits('~imke/keck/2015aug29/reduct/fits/hpmask.fits')

## load our Neptune frames
# loadims divids by number of coadds. eventually need photons/s, i.e. divide by coadds*tint
.run ~/idl/imke_pro/loadims2.pro
loadims,65,67,neph65,fdir='data/',fname='n000',ext='.fits',scam='scam'  
loadims,68,70,nepkp68,fdir='data/',fname='n000',ext='.fits',scam='scam'  
loadims,71,73,nepch4s70,fdir='data/',fname='n000',ext='.fits',scam='scam'  

## median average the bxy3 frames to get a sky
avgmed_new,skyh,neph65,/noweight
atv,skyh

## this interactively asks you to identify patches of "normal" sky in each of the three bxy3 frames. comes up with a median average value of background for each frame. Then you normalize the "full" sky frame we got from median of bxy3 to the value of the sky brightness in the single frame. Finally subtract normalized sky frame from image
.run skysub
skysub,neph65,skyh,neph

## apply flat field
for i=0,2 do neph65(*,*,i)=neph(*,*,i)/flath(*,*)

## apply bad pixel map
## replaces bad pixel by median value of pixels nearby
badpix,neph65,out,hpmask
# there are still bad pixels from cosmic rays
atv,out
neph65=out

## why don't we take darks? because data and sky both have identical detector noise in them, and we subtract the two.

## remove distortions (non-linearity in distance from pixel to pixel) from detector. These have been well characterized - can download nirc2dewarp from Keck site, or check andrea ghez's group's papers for most up-to-date version that was developed for precision astrometry of galactic center. Someone may have written this in Python already
# this program does not work for subc
# may need to compile twice
.run ~/idl/imke_pro/nirc2dewarp
.run ~/idl/imke_pro/nirc2dewarp_ext #wraps nirc2dewarp so can do for more than one image at once
nirc2dewarp_ext,neph65,neph65w

## trim images to only get 512x512 boxes around Neptune itself
neph=fltarr(512,512,3)   
neph(0:511,0:511,0)=neph65w(0:511,512:1023,0)
neph(0:511,0:511,1)=neph65w(512:1023,0:511,1)
neph(0:511,0:511,2)=neph65w(512:1023,512:1023,2)
out=neph

## cosmic ray removal
# find and remove bad pixels (either very high or very low values)
# Katherine and Josh each have their own
.run cosmicrayp #positive values
 cosmicray,out,imout
out=imout
.run cosmicneg.pro #negative values
 cosmicneg,out,imout
 out=imout
atv,out
neph=out

## cross-correlates each bxy3 frame to see what offset is necessary to align the three in Fourier space
# *should* find sub-pixel shift
# can fail if there is a star in the frame, for example
.compile find_offsets_imstack_fft.pro
shif=find_offsets_imstack_fft(neph)

print,shif(*,0)
print,shif(*,1)

## this actually shifts them, using an interpolation function to allow sub-px shifts
# says shif_fft, but actually this is all done in the image plane
.run shif_fft
shif_fft,neph,out,shif
atv,out
neph=out

## median average the three images to get final image
# check to see if the combined image is sharper than individual frames
# can use individual frames; that is often done for wide band filters where there is high S/N, esp. if one of them is very good
# this may be slightly wrong because of Neptune's rotation - would need to project image, derotate, combine, then deproject - lots of work and probably unnecessary for these small shifts
# keep all images, not just the averaged one!
avgmed_new,neph_avg,neph,/noweight
atv,neph_avg

neph65=neph
neph65_avg=neph_avg

save,filename='reduct/savefiles/neph65.sav',neph65,neph65_avg 

## then do all the same stuff for the other bands
