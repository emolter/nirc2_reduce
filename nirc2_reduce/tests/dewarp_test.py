#!/usr/bin/env python

from astropy.io import fits
import numpy as np
from scipy.interpolate import RectBivariateSpline
import matplotlib.pyplot as plt

def dewarp(frame):
    '''
    Using updated maps from Ghez, Lu galactic center group (Service et al. 2016)
    doi:10.1088/1538-3873/128/967/095004
    Spline interpolation used to interpolate original image. 
    The spline is then evaluated at new pixel locations computed from the map.
    
    Parameters
    ----------
    frame: 2-D np array containing the nirc2 data
    
    Returns
    -------
    dewarped frame
    
    To do
    -----
    relative import of fits files
    
    Notes
    -----
    From Service+16: 
        "These are lookup tables generated by evaluating the fits 
        from the previous section at the center of every pixel on the 
        NIRC2 detector and are the values that should be added to 
        raw NIRC2 positions to shift them to a distortion-free frame"
    So the position offsets in the fits files should be added. 
    That this works right can be checked by looking at difference maps 
        and comparing with the expected vectors in Service+16
    '''
    warpx = fits.getdata('../data/nirc2_distort_X_post20150413_v1.fits')
    warpy = fits.getdata('../data/nirc2_distort_Y_post20150413_v1.fits')
    
    szx = frame.shape[0]
    szy = frame.shape[1]
    xx = np.linspace(0,szx-1,szx)
    yy = np.linspace(0,szy-1,szy)
    x,y = np.meshgrid(xx,yy)
    mapx = x - warpy #should it be plus or minus?
    mapy = y + warpx
    flatx = mapx.flatten()
    flaty = mapy.flatten()
    
    frame_spline = RectBivariateSpline(xx,yy,frame)
    frame_dw = frame_spline.ev(flatx,flaty).reshape(frame.shape).T

    return frame_dw, warpx, warpy

# import and dewarp   
hdul = fits.open('data/nep_H_warped.fits') 
frame = fits.getdata('data/nep_H_warped.fits')
frame_dw, warpx, warpy = dewarp(frame)

hdul[0].data = frame_dw
hdul.writeto('data/nep_H_dewarp_molter.fits', overwrite=True)

# import the dewarped image from the old IDL routine
frame_idl = fits.getdata('data/nep_H_dewarp_idl.fits')
print(frame_idl.shape)

# plot 
y0, y1, x0, x1 = 380, 680, 600, 900

warpx, warpy = warpx[x0:x1,y0:y1], warpy[x0:x1,y0:y1]
i, j = 100, 125
k, l = 250, 225
print(warpx[i,j], warpy[i,j])

fig, ((ax0, ax1, ax2), (ax3, ax4, ax5)) = plt.subplots(2,3, figsize = (12,8))

ax0.imshow(frame[x0:x1,y0:y1], origin='lower')
ax0.set_title('Original')

ax1.imshow(frame_dw[x0:x1,y0:y1], origin='lower')
ax1.set_title('Dewarped (Molter)')

diff = (frame_dw - frame)[x0:x1,y0:y1]
ax2.imshow(diff, origin='lower', vmin = np.min(diff)/3, vmax = np.max(diff)/3)
ax2.quiver(*np.array([[i, k], [j,l]]), [warpx[i,j], warpx[k,l]], [warpy[i,j], warpy[k,l]], scale=2, color = 'red')
ax2.set_title('Dewarped (Service+16) - Original')

ax3.imshow(warpx[x0:x1,y0:y1], origin='lower')
ax3.set_title('Distortion solution in +X direction')

ax4.imshow(frame_idl[x0-512:x1-512,y0:y1], origin='lower')
ax4.set_title('Dewarped (IDL)')

diff_idl = frame_idl[x0-512:x1-512,y0:y1] - frame[x0:x1,y0:y1]
ax5.imshow(diff_idl, origin='lower', vmin = np.min(diff_idl)/16, vmax = np.max(diff_idl)/3)
ax5.quiver(*np.array([[i, k], [j,l]]), [warpx[i,j], warpx[k,l]], [warpy[i,j], warpy[k,l]], scale=2, color = 'red')
ax5.set_title('Dewarped (IDL) - Original')

fig.savefig('dewarp_test.png', dpi=300)
plt.show()
    